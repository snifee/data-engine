/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.snifee.avroclass;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TRANSACTION extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1374724388396098375L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TRANSACTION\",\"namespace\":\"com.snifee.avroclass\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"source_bank\",\"type\":\"string\"},{\"name\":\"dest_bank\",\"type\":\"string\"},{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"receiving_currency\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"string\"},{\"name\":\"payment_currency\",\"type\":\"string\"},{\"name\":\"payment_format\",\"type\":\"string\"},{\"name\":\"is_laundering\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TRANSACTION> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TRANSACTION> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TRANSACTION> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TRANSACTION> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TRANSACTION> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TRANSACTION to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TRANSACTION from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TRANSACTION instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TRANSACTION fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence source_bank;
  private java.lang.CharSequence dest_bank;
  private java.lang.CharSequence account;
  private java.lang.CharSequence receiving_currency;
  private java.lang.CharSequence amount;
  private java.lang.CharSequence payment_currency;
  private java.lang.CharSequence payment_format;
  private int is_laundering;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TRANSACTION() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param source_bank The new value for source_bank
   * @param dest_bank The new value for dest_bank
   * @param account The new value for account
   * @param receiving_currency The new value for receiving_currency
   * @param amount The new value for amount
   * @param payment_currency The new value for payment_currency
   * @param payment_format The new value for payment_format
   * @param is_laundering The new value for is_laundering
   */
  public TRANSACTION(java.lang.CharSequence id, java.lang.CharSequence source_bank, java.lang.CharSequence dest_bank, java.lang.CharSequence account, java.lang.CharSequence receiving_currency, java.lang.CharSequence amount, java.lang.CharSequence payment_currency, java.lang.CharSequence payment_format, java.lang.Integer is_laundering) {
    this.id = id;
    this.source_bank = source_bank;
    this.dest_bank = dest_bank;
    this.account = account;
    this.receiving_currency = receiving_currency;
    this.amount = amount;
    this.payment_currency = payment_currency;
    this.payment_format = payment_format;
    this.is_laundering = is_laundering;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return source_bank;
    case 2: return dest_bank;
    case 3: return account;
    case 4: return receiving_currency;
    case 5: return amount;
    case 6: return payment_currency;
    case 7: return payment_format;
    case 8: return is_laundering;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: source_bank = (java.lang.CharSequence)value$; break;
    case 2: dest_bank = (java.lang.CharSequence)value$; break;
    case 3: account = (java.lang.CharSequence)value$; break;
    case 4: receiving_currency = (java.lang.CharSequence)value$; break;
    case 5: amount = (java.lang.CharSequence)value$; break;
    case 6: payment_currency = (java.lang.CharSequence)value$; break;
    case 7: payment_format = (java.lang.CharSequence)value$; break;
    case 8: is_laundering = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'source_bank' field.
   * @return The value of the 'source_bank' field.
   */
  public java.lang.CharSequence getSourceBank() {
    return source_bank;
  }


  /**
   * Sets the value of the 'source_bank' field.
   * @param value the value to set.
   */
  public void setSourceBank(java.lang.CharSequence value) {
    this.source_bank = value;
  }

  /**
   * Gets the value of the 'dest_bank' field.
   * @return The value of the 'dest_bank' field.
   */
  public java.lang.CharSequence getDestBank() {
    return dest_bank;
  }


  /**
   * Sets the value of the 'dest_bank' field.
   * @param value the value to set.
   */
  public void setDestBank(java.lang.CharSequence value) {
    this.dest_bank = value;
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public java.lang.CharSequence getAccount() {
    return account;
  }


  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(java.lang.CharSequence value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'receiving_currency' field.
   * @return The value of the 'receiving_currency' field.
   */
  public java.lang.CharSequence getReceivingCurrency() {
    return receiving_currency;
  }


  /**
   * Sets the value of the 'receiving_currency' field.
   * @param value the value to set.
   */
  public void setReceivingCurrency(java.lang.CharSequence value) {
    this.receiving_currency = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.CharSequence getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'payment_currency' field.
   * @return The value of the 'payment_currency' field.
   */
  public java.lang.CharSequence getPaymentCurrency() {
    return payment_currency;
  }


  /**
   * Sets the value of the 'payment_currency' field.
   * @param value the value to set.
   */
  public void setPaymentCurrency(java.lang.CharSequence value) {
    this.payment_currency = value;
  }

  /**
   * Gets the value of the 'payment_format' field.
   * @return The value of the 'payment_format' field.
   */
  public java.lang.CharSequence getPaymentFormat() {
    return payment_format;
  }


  /**
   * Sets the value of the 'payment_format' field.
   * @param value the value to set.
   */
  public void setPaymentFormat(java.lang.CharSequence value) {
    this.payment_format = value;
  }

  /**
   * Gets the value of the 'is_laundering' field.
   * @return The value of the 'is_laundering' field.
   */
  public int getIsLaundering() {
    return is_laundering;
  }


  /**
   * Sets the value of the 'is_laundering' field.
   * @param value the value to set.
   */
  public void setIsLaundering(int value) {
    this.is_laundering = value;
  }

  /**
   * Creates a new TRANSACTION RecordBuilder.
   * @return A new TRANSACTION RecordBuilder
   */
  public static com.snifee.avroclass.TRANSACTION.Builder newBuilder() {
    return new com.snifee.avroclass.TRANSACTION.Builder();
  }

  /**
   * Creates a new TRANSACTION RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TRANSACTION RecordBuilder
   */
  public static com.snifee.avroclass.TRANSACTION.Builder newBuilder(com.snifee.avroclass.TRANSACTION.Builder other) {
    if (other == null) {
      return new com.snifee.avroclass.TRANSACTION.Builder();
    } else {
      return new com.snifee.avroclass.TRANSACTION.Builder(other);
    }
  }

  /**
   * Creates a new TRANSACTION RecordBuilder by copying an existing TRANSACTION instance.
   * @param other The existing instance to copy.
   * @return A new TRANSACTION RecordBuilder
   */
  public static com.snifee.avroclass.TRANSACTION.Builder newBuilder(com.snifee.avroclass.TRANSACTION other) {
    if (other == null) {
      return new com.snifee.avroclass.TRANSACTION.Builder();
    } else {
      return new com.snifee.avroclass.TRANSACTION.Builder(other);
    }
  }

  /**
   * RecordBuilder for TRANSACTION instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TRANSACTION>
    implements org.apache.avro.data.RecordBuilder<TRANSACTION> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence source_bank;
    private java.lang.CharSequence dest_bank;
    private java.lang.CharSequence account;
    private java.lang.CharSequence receiving_currency;
    private java.lang.CharSequence amount;
    private java.lang.CharSequence payment_currency;
    private java.lang.CharSequence payment_format;
    private int is_laundering;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.snifee.avroclass.TRANSACTION.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.source_bank)) {
        this.source_bank = data().deepCopy(fields()[1].schema(), other.source_bank);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dest_bank)) {
        this.dest_bank = data().deepCopy(fields()[2].schema(), other.dest_bank);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.account)) {
        this.account = data().deepCopy(fields()[3].schema(), other.account);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.receiving_currency)) {
        this.receiving_currency = data().deepCopy(fields()[4].schema(), other.receiving_currency);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.payment_currency)) {
        this.payment_currency = data().deepCopy(fields()[6].schema(), other.payment_currency);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.payment_format)) {
        this.payment_format = data().deepCopy(fields()[7].schema(), other.payment_format);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.is_laundering)) {
        this.is_laundering = data().deepCopy(fields()[8].schema(), other.is_laundering);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TRANSACTION instance
     * @param other The existing instance to copy.
     */
    private Builder(com.snifee.avroclass.TRANSACTION other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source_bank)) {
        this.source_bank = data().deepCopy(fields()[1].schema(), other.source_bank);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dest_bank)) {
        this.dest_bank = data().deepCopy(fields()[2].schema(), other.dest_bank);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.account)) {
        this.account = data().deepCopy(fields()[3].schema(), other.account);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.receiving_currency)) {
        this.receiving_currency = data().deepCopy(fields()[4].schema(), other.receiving_currency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.payment_currency)) {
        this.payment_currency = data().deepCopy(fields()[6].schema(), other.payment_currency);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.payment_format)) {
        this.payment_format = data().deepCopy(fields()[7].schema(), other.payment_format);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.is_laundering)) {
        this.is_laundering = data().deepCopy(fields()[8].schema(), other.is_laundering);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source_bank' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceBank() {
      return source_bank;
    }


    /**
      * Sets the value of the 'source_bank' field.
      * @param value The value of 'source_bank'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setSourceBank(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.source_bank = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source_bank' field has been set.
      * @return True if the 'source_bank' field has been set, false otherwise.
      */
    public boolean hasSourceBank() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'source_bank' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearSourceBank() {
      source_bank = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dest_bank' field.
      * @return The value.
      */
    public java.lang.CharSequence getDestBank() {
      return dest_bank;
    }


    /**
      * Sets the value of the 'dest_bank' field.
      * @param value The value of 'dest_bank'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setDestBank(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dest_bank = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dest_bank' field has been set.
      * @return True if the 'dest_bank' field has been set, false otherwise.
      */
    public boolean hasDestBank() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dest_bank' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearDestBank() {
      dest_bank = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccount() {
      return account;
    }


    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setAccount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.account = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearAccount() {
      account = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiving_currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getReceivingCurrency() {
      return receiving_currency;
    }


    /**
      * Sets the value of the 'receiving_currency' field.
      * @param value The value of 'receiving_currency'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setReceivingCurrency(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.receiving_currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'receiving_currency' field has been set.
      * @return True if the 'receiving_currency' field has been set, false otherwise.
      */
    public boolean hasReceivingCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'receiving_currency' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearReceivingCurrency() {
      receiving_currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.CharSequence getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setAmount(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.amount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentCurrency() {
      return payment_currency;
    }


    /**
      * Sets the value of the 'payment_currency' field.
      * @param value The value of 'payment_currency'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setPaymentCurrency(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.payment_currency = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_currency' field has been set.
      * @return True if the 'payment_currency' field has been set, false otherwise.
      */
    public boolean hasPaymentCurrency() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'payment_currency' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearPaymentCurrency() {
      payment_currency = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_format' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentFormat() {
      return payment_format;
    }


    /**
      * Sets the value of the 'payment_format' field.
      * @param value The value of 'payment_format'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setPaymentFormat(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.payment_format = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_format' field has been set.
      * @return True if the 'payment_format' field has been set, false otherwise.
      */
    public boolean hasPaymentFormat() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'payment_format' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearPaymentFormat() {
      payment_format = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_laundering' field.
      * @return The value.
      */
    public int getIsLaundering() {
      return is_laundering;
    }


    /**
      * Sets the value of the 'is_laundering' field.
      * @param value The value of 'is_laundering'.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder setIsLaundering(int value) {
      validate(fields()[8], value);
      this.is_laundering = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'is_laundering' field has been set.
      * @return True if the 'is_laundering' field has been set, false otherwise.
      */
    public boolean hasIsLaundering() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'is_laundering' field.
      * @return This builder.
      */
    public com.snifee.avroclass.TRANSACTION.Builder clearIsLaundering() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TRANSACTION build() {
      try {
        TRANSACTION record = new TRANSACTION();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.source_bank = fieldSetFlags()[1] ? this.source_bank : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dest_bank = fieldSetFlags()[2] ? this.dest_bank : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.account = fieldSetFlags()[3] ? this.account : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.receiving_currency = fieldSetFlags()[4] ? this.receiving_currency : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.amount = fieldSetFlags()[5] ? this.amount : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.payment_currency = fieldSetFlags()[6] ? this.payment_currency : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.payment_format = fieldSetFlags()[7] ? this.payment_format : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.is_laundering = fieldSetFlags()[8] ? this.is_laundering : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TRANSACTION>
    WRITER$ = (org.apache.avro.io.DatumWriter<TRANSACTION>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TRANSACTION>
    READER$ = (org.apache.avro.io.DatumReader<TRANSACTION>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.source_bank);

    out.writeString(this.dest_bank);

    out.writeString(this.account);

    out.writeString(this.receiving_currency);

    out.writeString(this.amount);

    out.writeString(this.payment_currency);

    out.writeString(this.payment_format);

    out.writeInt(this.is_laundering);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.source_bank = in.readString(this.source_bank instanceof Utf8 ? (Utf8)this.source_bank : null);

      this.dest_bank = in.readString(this.dest_bank instanceof Utf8 ? (Utf8)this.dest_bank : null);

      this.account = in.readString(this.account instanceof Utf8 ? (Utf8)this.account : null);

      this.receiving_currency = in.readString(this.receiving_currency instanceof Utf8 ? (Utf8)this.receiving_currency : null);

      this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);

      this.payment_currency = in.readString(this.payment_currency instanceof Utf8 ? (Utf8)this.payment_currency : null);

      this.payment_format = in.readString(this.payment_format instanceof Utf8 ? (Utf8)this.payment_format : null);

      this.is_laundering = in.readInt();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.source_bank = in.readString(this.source_bank instanceof Utf8 ? (Utf8)this.source_bank : null);
          break;

        case 2:
          this.dest_bank = in.readString(this.dest_bank instanceof Utf8 ? (Utf8)this.dest_bank : null);
          break;

        case 3:
          this.account = in.readString(this.account instanceof Utf8 ? (Utf8)this.account : null);
          break;

        case 4:
          this.receiving_currency = in.readString(this.receiving_currency instanceof Utf8 ? (Utf8)this.receiving_currency : null);
          break;

        case 5:
          this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);
          break;

        case 6:
          this.payment_currency = in.readString(this.payment_currency instanceof Utf8 ? (Utf8)this.payment_currency : null);
          break;

        case 7:
          this.payment_format = in.readString(this.payment_format instanceof Utf8 ? (Utf8)this.payment_format : null);
          break;

        case 8:
          this.is_laundering = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










